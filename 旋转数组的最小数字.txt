题目：
把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一个旋转，该数组的最小值为1。

示例：
输入：[3,4,5,1,2]
输出：1

解答：
class Solution {
    public int minArray(int[] numbers) {
        int a=0;
        if(numbers.length==1)
        a=numbers[0];
        if(numbers.length>1){

            for(int i=1;i<numbers.length;i++){
            if(numbers[i]<numbers[i-1]){
                a= numbers[i];
                break;
            }
            else
                a=numbers[0];
            
        }
     }
      
        return a;
    }
}
我是直接找的最小元素，一次遍历
官方答案：二分查找
考虑数组中的最后一个元素 xx：在最小值右侧的元素，它们的值一定都小于等于 xx；而在最小值左侧的元素，它们的值一定都大于等于 xx。因此，我们可以根据这一条性质，通过二分查找的方法找出最小值。

第一种情况是 \textit{numbers}[\textit{pivot}] < \textit{numbers}[\textit{high}]numbers[pivot]<numbers[high]。如下图所示，这说明 \textit{numbers}[\textit{pivot}]numbers[pivot] 是最小值右侧的元素，因此我们可以忽略二分查找区间的右半部分。
第二种情况是 \textit{numbers}[\textit{pivot}] > \textit{numbers}[\textit{high}]numbers[pivot]>numbers[high]。如下图所示，这说明 \textit{numbers}[\textit{pivot}]numbers[pivot] 是最小值左侧的元素，因此我们可以忽略二分查找区间的左半部分。
第三种情况是 \textit{numbers}[\textit{pivot}] == \textit{numbers}[\textit{high}]numbers[pivot]==numbers[high]。high--
class Solution {
public:
    int minArray(vector<int>& numbers) {
        int low = 0;
        int high = numbers.size() - 1;
        while (low < high) {
            int pivot = low + (high - low) / 2;
            if (numbers[pivot] < numbers[high]) {
                high = pivot;
            }
            else if (numbers[pivot] > numbers[high]) {
                low = pivot + 1;
            }
            else {
                high -= 1;
            }
        }
        return numbers[low];
    }
};


