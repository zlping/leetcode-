/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int kthLargest(TreeNode root, int k) {
    /*对树中序遍历存入数组，根据索引值输出*/
        if(root==null) return 0;
        List<Integer> list=new ArrayList<>();
        inOrder(root,list);
        return list.get(list.size()-k);

    }
    public void inOrder(TreeNode root,List<Integer> list)
    {

        if(root == null) return;
        if(root.left != null) inOrder(root.left,list);
        list.add(root.val);
        if(root.right != null) inOrder(root.right,list);

    }
}
第K大，所以右根左；第K小才是左根右
其实，当遍历到了第K大数的时候，就可以停止遍历了，同时，把遍历到节点对应的数保存下来即可。
class Solution {
    private int ans = 0, count = 0;
    public int kthLargest(TreeNode root, int k) {
        // clarification:  root == null?   k <= 1?
        helper(root, k);
        return ans;
    }
    
    private void helper(TreeNode root, int k) {
        if (root.right != null) helper(root.right, k);
        
        if (++count == k) {
            ans = root.val;
            return;
        }
        
        if (root.left != null) helper(root.left, k);
    }
}